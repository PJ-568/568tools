import{Konva}from"./Global.js";import{Util}from"./Util.js";export const DD={get isDragging(){var e=!1;return DD._dragElements.forEach((t=>{"dragging"===t.dragStatus&&(e=!0)})),e},justDragged:!1,get node(){var e;return DD._dragElements.forEach((t=>{e=t.node})),e},_dragElements:new Map,_drag(e){const t=[];DD._dragElements.forEach(((r,n)=>{const{node:a}=r,o=a.getStage();o.setPointersPositions(e),void 0===r.pointerId&&(r.pointerId=Util._getFirstPointerId(e));const d=o._changedPointerPositions.find((e=>e.id===r.pointerId));if(d){if("dragging"!==r.dragStatus){var s=a.dragDistance();if(Math.max(Math.abs(d.x-r.startPointerPos.x),Math.abs(d.y-r.startPointerPos.y))<s)return;if(a.startDrag({evt:e}),!a.isDragging())return}a._setDragPosition(e,r),t.push(a)}})),t.forEach((t=>{t.fire("dragmove",{type:"dragmove",target:t,evt:e},!0)}))},_endDragBefore(e){const t=[];DD._dragElements.forEach((r=>{const{node:n}=r,a=n.getStage();e&&a.setPointersPositions(e);if(!a._changedPointerPositions.find((e=>e.id===r.pointerId)))return;"dragging"!==r.dragStatus&&"stopped"!==r.dragStatus||(DD.justDragged=!0,Konva._mouseListenClick=!1,Konva._touchListenClick=!1,Konva._pointerListenClick=!1,r.dragStatus="stopped");const o=r.node.getLayer()||r.node instanceof Konva.Stage&&r.node;o&&-1===t.indexOf(o)&&t.push(o)})),t.forEach((e=>{e.draw()}))},_endDragAfter(e){DD._dragElements.forEach(((t,r)=>{"stopped"===t.dragStatus&&t.node.fire("dragend",{type:"dragend",target:t.node,evt:e},!0),"dragging"!==t.dragStatus&&DD._dragElements.delete(r)}))}};Konva.isBrowser&&(window.addEventListener("mouseup",DD._endDragBefore,!0),window.addEventListener("touchend",DD._endDragBefore,!0),window.addEventListener("mousemove",DD._drag),window.addEventListener("touchmove",DD._drag),window.addEventListener("mouseup",DD._endDragAfter,!1),window.addEventListener("touchend",DD._endDragAfter,!1));
