import{Factory}from"../Factory.js";import{Shape}from"../Shape.js";import{getNumberValidator,getNumberArrayValidator}from"../Validators.js";import{_registerNode}from"../Global.js";function getControlPoints(t,e,n,i,o,s,r){var a=Math.sqrt(Math.pow(n-t,2)+Math.pow(i-e,2)),h=Math.sqrt(Math.pow(o-n,2)+Math.pow(s-i,2)),g=r*a/(a+h),l=r*h/(a+h);return[n-g*(o-t),i-g*(s-e),n+l*(o-t),i+l*(s-e)]}function expandPoints(t,e){var n,i,o=t.length,s=[];for(n=2;n<o-2;n+=2)i=getControlPoints(t[n-2],t[n-1],t[n],t[n+1],t[n+2],t[n+3],e),isNaN(i[0])||(s.push(i[0]),s.push(i[1]),s.push(t[n]),s.push(t[n+1]),s.push(i[2]),s.push(i[3]));return s}export class Line extends Shape{constructor(t){super(t),this.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",(function(){this._clearCache("tensionPoints")}))}_sceneFunc(t){var e,n,i,o=this.points(),s=o.length,r=this.tension(),a=this.closed(),h=this.bezier();if(s){if(t.beginPath(),t.moveTo(o[0],o[1]),0!==r&&s>4){for(n=(e=this.getTensionPoints()).length,i=a?0:4,a||t.quadraticCurveTo(e[0],e[1],e[2],e[3]);i<n-2;)t.bezierCurveTo(e[i++],e[i++],e[i++],e[i++],e[i++],e[i++]);a||t.quadraticCurveTo(e[n-2],e[n-1],o[s-2],o[s-1])}else if(h)for(i=2;i<s;)t.bezierCurveTo(o[i++],o[i++],o[i++],o[i++],o[i++],o[i++]);else for(i=2;i<s;i+=2)t.lineTo(o[i],o[i+1]);a?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}}getTensionPoints(){return this._getCache("tensionPoints",this._getTensionPoints)}_getTensionPoints(){return this.closed()?this._getTensionPointsClosed():expandPoints(this.points(),this.tension())}_getTensionPointsClosed(){var t=this.points(),e=t.length,n=this.tension(),i=getControlPoints(t[e-2],t[e-1],t[0],t[1],t[2],t[3],n),o=getControlPoints(t[e-4],t[e-3],t[e-2],t[e-1],t[0],t[1],n),s=expandPoints(t,n);return[i[2],i[3]].concat(s).concat([o[0],o[1],t[e-2],t[e-1],o[2],o[3],i[0],i[1],t[0],t[1]])}getWidth(){return this.getSelfRect().width}getHeight(){return this.getSelfRect().height}getSelfRect(){var t=this.points();if(t.length<4)return{x:t[0]||0,y:t[1]||0,width:0,height:0};for(var e,n,i=(t=0!==this.tension()?[t[0],t[1],...this._getTensionPoints(),t[t.length-2],t[t.length-1]]:this.points())[0],o=t[0],s=t[1],r=t[1],a=0;a<t.length/2;a++)e=t[2*a],n=t[2*a+1],i=Math.min(i,e),o=Math.max(o,e),s=Math.min(s,n),r=Math.max(r,n);return{x:i,y:s,width:o-i,height:r-s}}}Line.prototype.className="Line",Line.prototype._attrsAffectingSize=["points","bezier","tension"],_registerNode(Line),Factory.addGetterSetter(Line,"closed",!1),Factory.addGetterSetter(Line,"bezier",!1),Factory.addGetterSetter(Line,"tension",0,getNumberValidator()),Factory.addGetterSetter(Line,"points",[],getNumberArrayValidator());
