"use strict";var utils=require("../utils"),ConvertWorker=require("./ConvertWorker"),GenericWorker=require("./GenericWorker"),base64=require("../base64"),support=require("../support"),external=require("../external"),NodejsStreamOutputAdapter=null;if(support.nodestream)try{NodejsStreamOutputAdapter=require("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function transformZipOutput(e,r,t){switch(e){case"blob":return utils.newBlob(utils.transformTo("arraybuffer",r),t);case"base64":return base64.encode(r);default:return utils.transformTo(e,r)}}function concat(e,r){var t,n=0,u=null,o=0;for(t=0;t<r.length;t++)o+=r[t].length;switch(e){case"string":return r.join("");case"array":return Array.prototype.concat.apply([],r);case"uint8array":for(u=new Uint8Array(o),t=0;t<r.length;t++)u.set(r[t],n),n+=r[t].length;return u;case"nodebuffer":return Buffer.concat(r);default:throw new Error("concat : unsupported type '"+e+"'")}}function accumulate(e,r){return new external.Promise((function(t,n){var u=[],o=e._internalType,a=e._outputType,s=e._mimeType;e.on("data",(function(e,t){u.push(e),r&&r(t)})).on("error",(function(e){u=[],n(e)})).on("end",(function(){try{var e=transformZipOutput(a,concat(o,u),s);t(e)}catch(e){n(e)}u=[]})).resume()}))}function StreamHelper(e,r,t){var n=r;switch(r){case"blob":case"arraybuffer":n="uint8array";break;case"base64":n="string"}try{this._internalType=n,this._outputType=r,this._mimeType=t,utils.checkSupport(n),this._worker=e.pipe(new ConvertWorker(n)),e.lock()}catch(e){this._worker=new GenericWorker("error"),this._worker.error(e)}}StreamHelper.prototype={accumulate:function(e){return accumulate(this,e)},on:function(e,r){var t=this;return"data"===e?this._worker.on(e,(function(e){r.call(t,e.data,e.meta)})):this._worker.on(e,(function(){utils.delay(r,arguments,t)})),this},resume:function(){return utils.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(utils.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new NodejsStreamOutputAdapter(this,{objectMode:"nodebuffer"!==this._outputType},e)}},module.exports=StreamHelper;
