import{Text}from"@svgdotjs/svg.js";import{getStrWithBrFromHtml}from"../../utils/index";function createText(t){let e=this.draw.group();const i=()=>{this.activeLine&&this.activeLine[3]===t.node&&this.activeLine[4]===t.toNode||this.setActiveLine({...t,text:e})};return e.click((t=>{t.stopPropagation(),i()})),e.on("dblclick",(t=>{t.stopPropagation(),i(),this.activeLine&&this.showEditTextBox(e)})),e}function showEditTextBox(t){this.mindMap.emit("before_show_text_edit"),this.mindMap.keyCommand.addShortcut("Enter",(()=>{this.hideEditTextBox()})),this.textEditNode||(this.textEditNode=document.createElement("div"),this.textEditNode.style.cssText="position:fixed;box-sizing: border-box;background-color:#fff;box-shadow: 0 0 20px rgba(0,0,0,.5);padding: 3px 5px;margin-left: -5px;margin-top: -3px;outline: none; word-break: break-all;",this.textEditNode.setAttribute("contenteditable",!0),this.textEditNode.addEventListener("keyup",(t=>{t.stopPropagation()})),this.textEditNode.addEventListener("click",(t=>{t.stopPropagation()})),document.body.appendChild(this.textEditNode));let{associativeLineTextFontSize:e,associativeLineTextFontFamily:i,associativeLineTextLineHeight:o}=this.mindMap.themeConfig,d=this.mindMap.view.scale,[,,,n,s]=this.activeLine,x=(this.getText(n,s)||this.mindMap.opt.defaultAssociativeLineText).split(/\n/gim);this.textEditNode.style.fontFamily=i,this.textEditNode.style.fontSize=e*d+"px",this.textEditNode.style.lineHeight=x.length>1?o:"normal",this.textEditNode.style.zIndex=this.mindMap.opt.nodeTextEditZIndex,this.textEditNode.innerHTML=x.join("<br>"),this.textEditNode.style.display="block",this.updateTextEditBoxPos(t),this.showTextEdit=!0}function onScale(){this.hideEditTextBox()}function updateTextEditBoxPos(t){let e=t.node.getBoundingClientRect();this.textEditNode.style.minWidth=e.width+10+"px",this.textEditNode.style.minHeight=e.height+6+"px",this.textEditNode.style.left=e.left+"px",this.textEditNode.style.top=e.top+"px"}function hideEditTextBox(){if(!this.showTextEdit)return;let[t,,e,i,o]=this.activeLine,d=getStrWithBrFromHtml(this.textEditNode.innerHTML);this.mindMap.execCommand("SET_NODE_DATA",i,{associativeLineText:{...i.nodeData.data.associativeLineText||{},[o.nodeData.data.id]:d}}),this.textEditNode.style.display="none",this.textEditNode.innerHTML="",this.showTextEdit=!1,this.renderText(d,t,e),this.mindMap.emit("hide_text_edit")}function getText(t,e){let i=t.nodeData.data.associativeLineText;return i&&i[e.nodeData.data.id]||""}function renderText(t,e,i){if(!t)return;let{associativeLineTextFontSize:o,associativeLineTextLineHeight:d}=this.mindMap.themeConfig;i.clear(),t.split(/\n/gim).forEach(((t,e)=>{let n=(new Text).text(t);n.y(o*d*e),this.styleText(n),i.add(n)})),updateTextPos(e,i)}function styleText(t){let{associativeLineTextColor:e,associativeLineTextFontSize:i,associativeLineTextFontFamily:o}=this.mindMap.themeConfig;t.fill({color:e}).css({"font-family":o,"font-size":i})}function updateTextPos(t,e){let i=t.length(),o=t.pointAt(i/2),{width:d,height:n}=e.bbox();e.x(o.x-d/2),e.y(o.y-n/2)}export default{getText:getText,createText:createText,styleText:styleText,onScale:onScale,showEditTextBox:showEditTextBox,hideEditTextBox:hideEditTextBox,updateTextEditBoxPos:updateTextEditBoxPos,renderText:renderText,updateTextPos:updateTextPos};
