import{imgToDataUrl,downloadFile,readBlob}from"../utils";import{SVG}from"@svgdotjs/svg.js";import drawBackgroundImageToCanvas from"../utils/simulateCSSBackgroundInCanvas";import{transformToMarkdown}from"../parse/toMarkdown";class Export{constructor(t){this.mindMap=t.mindMap,this.exportPadding=this.mindMap.opt.exportPadding}async export(t,a=!0,e="思维导图",...r){if(this[t]){let n=await this[t](e,...r);return a&&"pdf"!==t&&downloadFile(n,e+"."+t),n}return null}async getSvgData(){let{exportPaddingX:t,exportPaddingY:a}=this.mindMap.opt,{svg:e,svgHTML:r}=this.mindMap.getSvgData({paddingX:t,paddingY:a}),n=e.find("image"),o=n.map((async t=>{let a=t.attr("href")||t.attr("xlink:href"),e=await imgToDataUrl(a);t.attr("href",e)}));return await Promise.all(o),n.length>0&&(r=e.svg()),{node:e,str:r}}svgToPng(t,a){return new Promise(((e,r)=>{const n=new Image;n.setAttribute("crossOrigin","anonymous"),n.onload=async()=>{try{let t=document.createElement("canvas");t.width=n.width+2*this.exportPadding,t.height=n.height+2*this.exportPadding;let r=t.getContext("2d");a||await this.drawBackgroundToCanvas(r,t.width,t.height),r.drawImage(n,0,0,n.width,n.height,this.exportPadding,this.exportPadding,n.width,n.height),e(t.toDataURL())}catch(t){r(t)}},n.onerror=t=>{r(t)},n.src=t}))}drawBackgroundToCanvas(t,a,e){return new Promise(((r,n)=>{let{backgroundColor:o="#fff",backgroundImage:i,backgroundRepeat:s="no-repeat",backgroundPosition:d="center center",backgroundSize:g="cover"}=this.mindMap.themeConfig;t.save(),t.rect(0,0,a,e),t.fillStyle=o,t.fill(),t.restore(),i&&"none"!==i?(t.save(),drawBackgroundImageToCanvas(t,a,e,i,{backgroundRepeat:s,backgroundPosition:d,backgroundSize:g},(a=>{a?n(a):r(),t.restore()}))):r()}))}drawBackgroundToSvg(t){return new Promise((async a=>{let{backgroundColor:e="#fff",backgroundImage:r,backgroundRepeat:n="repeat"}=this.mindMap.themeConfig;if(t.css("background-color",e),r&&"none"!==r){let e=await imgToDataUrl(r);t.css("background-image",`url(${e})`),t.css("background-repeat",n),a()}else a()}))}async png(t,a=!1){let{node:e,str:r}=await this.getSvgData();if(this.mindMap.richText){let t=await this.mindMap.richText.handleExportPng(e.node);return await this.svgToPng(t,a)}let n=new Blob([r],{type:"image/svg+xml"}),o=await readBlob(n);return await this.svgToPng(o,a)}async pdf(t){if(!this.mindMap.doExportPDF)throw new Error("请注册ExportPDF插件");let a=await this.png();this.mindMap.doExportPDF.pdf(t,a)}async svg(t,a){let{node:e}=await this.getSvgData();if(this.mindMap.richText&&a){let t=e.find("foreignObject");t.length>0&&t[0].add(SVG(`<style>${a}</style>`))}e.first().before(SVG(`<title>${t}</title>`)),await this.drawBackgroundToSvg(e);let r=e.svg(),n=new Blob([r],{type:"image/svg+xml"});return await readBlob(n)}async json(t,a=!0){let e=this.mindMap.getData(a),r=JSON.stringify(e),n=new Blob([r]);return await readBlob(n)}async smm(t,a){return await this.json(t,a)}async md(){let t=this.mindMap.getData(),a=transformToMarkdown(t),e=new Blob([a]);return await readBlob(e)}}Export.instanceName="doExport";export default Export;
