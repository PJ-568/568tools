import{walk,bfsWalk,throttle}from"../utils";import{v4 as uuid}from"uuid";import{getAssociativeLineTargetIndex,computeCubicBezierPathPoints,cubicBezierPath,getNodePoint,computeNodePoints,getNodeLinePath}from"./associativeLine/associativeLineUtils";import associativeLineControlsMethods from"./associativeLine/associativeLineControls";import associativeLineTextMethods from"./associativeLine/associativeLineText";class AssociativeLine{constructor(e={}){this.mindMap=e.mindMap,this.draw=this.mindMap.draw,this.lineList=[],this.activeLine=null,this.isCreatingLine=!1,this.creatingStartNode=null,this.creatingLine=null,this.overlapNode=null,this.isNodeDragging=!1,this.markerPath=null,this.marker=this.createMarker(),this.controlLine1=null,this.controlLine2=null,this.controlPoint1=null,this.controlPoint2=null,this.controlPointDiameter=10,this.isControlPointMousedown=!1,this.mousedownControlPointKey="",this.controlPointMousemoveState={pos:null,startPoint:null,endPoint:null,targetIndex:""},this.checkOverlapNode=throttle(this.checkOverlapNode,100,this),Object.keys(associativeLineControlsMethods).forEach((e=>{this[e]=associativeLineControlsMethods[e].bind(this)})),Object.keys(associativeLineTextMethods).forEach((e=>{this[e]=associativeLineTextMethods[e].bind(this)})),this.bindEvent()}bindEvent(){this.renderAllLines=this.renderAllLines.bind(this),this.mindMap.on("node_tree_render_end",this.renderAllLines),this.mindMap.on("data_change",this.renderAllLines),this.mindMap.on("draw_click",(()=>{this.isControlPointMousedown||this.clearActiveLine()})),this.mindMap.on("node_click",(e=>{this.isCreatingLine?this.completeCreateLine(e):this.clearActiveLine()})),this.mindMap.keyCommand.addShortcut("Del|Backspace",this.removeLine.bind(this)),this.mindMap.command.add("ADD_ASSOCIATIVE_LINE",this.addLine.bind(this)),this.mindMap.on("mousemove",this.onMousemove.bind(this)),this.mindMap.on("node_dragging",this.onNodeDragging.bind(this)),this.mindMap.on("node_dragend",this.onNodeDragend.bind(this)),this.mindMap.on("mouseup",this.onControlPointMouseup.bind(this)),this.mindMap.on("scale",this.onScale)}createMarker(){return this.draw.marker(20,20,(e=>{e.ref(2,5),e.size(10,10),e.attr("orient","auto-start-reverse"),this.markerPath=e.path("M0,0 L2,5 L0,10 L10,5 Z")}))}renderAllLines(){this.removeAllLines(),this.removeControls(),this.clearActiveLine();let e=this.mindMap.renderer.root;if(!e)return;let t=new Map,i=new Map;walk(e,null,(e=>{if(!e)return;let s=e.nodeData.data;s.associativeLineTargets&&s.associativeLineTargets.length>0&&i.set(e,s.associativeLineTargets),s.id&&t.set(s.id,e)}),(()=>{}),!0,0),i.forEach(((e,i)=>{e.forEach((e=>{let s=t.get(e);if(!i||!s)return;let[n,o]=computeNodePoints(i,s);this.drawLine(n,o,i,s)}))}))}drawLine(e,t,i,s){let{associativeLineWidth:n,associativeLineColor:o,associativeLineActiveWidth:a,associativeLineActiveColor:r}=this.mindMap.themeConfig;this.markerPath.stroke({color:o}).fill({color:o});let{path:h,controlPoints:d}=getNodeLinePath(e,t,i,s),l=this.draw.path();l.stroke({width:n,color:o,dasharray:[6,4]}).fill({color:"none"}),l.plot(h),l.marker("end",this.marker);let c=this.draw.path();c.stroke({width:a,color:"transparent"}).fill({color:"none"}),c.plot(h);let v=this.createText({path:l,clickPath:c,node:i,toNode:s,startPoint:e,endPoint:t,controlPoints:d});c.click((n=>{n.stopPropagation(),this.setActiveLine({path:l,clickPath:c,text:v,node:i,toNode:s,startPoint:e,endPoint:t,controlPoints:d})})),this.renderText(this.getText(i,s),l,v),this.lineList.push([l,c,v,i,s])}setActiveLine({path:e,clickPath:t,text:i,node:s,toNode:n,startPoint:o,endPoint:a,controlPoints:r}){let{associativeLineActiveColor:h}=this.mindMap.themeConfig;this.mindMap.renderer.activeNodeList.length>0?this.clearActiveNodes():(this.clearActiveLine(),this.activeLine=[e,t,i,s,n],t.stroke({color:h}),this.getText(s,n)||this.renderText(this.mindMap.opt.defaultAssociativeLineText,e,i),this.renderControls(o,a,r[0],r[1]),this.mindMap.emit("associative_line_click",e,t,s,n))}removeAllLines(){this.lineList.forEach((e=>{e[0].remove(),e[1].remove(),e[2].remove()})),this.lineList=[]}createLineFromActiveNode(){if(this.mindMap.renderer.activeNodeList.length<=0)return;let e=this.mindMap.renderer.activeNodeList[0];this.createLine(e)}createLine(e){let{associativeLineWidth:t,associativeLineColor:i}=this.mindMap.themeConfig;!this.isCreatingLine&&e&&(this.isCreatingLine=!0,this.creatingStartNode=e,this.creatingLine=this.draw.path(),this.creatingLine.stroke({width:t,color:i,dasharray:[6,4]}).fill({color:"none"}),this.creatingLine.marker("end",this.marker))}onMousemove(e){this.onControlPointMousemove(e),this.updateCreatingLine(e)}updateCreatingLine(e){if(!this.isCreatingLine)return;let{x:t,y:i}=this.getTransformedEventPos(e),s=getNodePoint(this.creatingStartNode),n=t>s.x?-10:10,o=cubicBezierPath(s.x,s.y,t+n,i);this.creatingLine.plot(o),this.checkOverlapNode(t,i)}getTransformedEventPos(e){let{x:t,y:i}=this.mindMap.toPos(e.clientX,e.clientY),{scaleX:s,scaleY:n,translateX:o,translateY:a}=this.mindMap.draw.transform();return{x:(t-o)/s,y:(i-a)/n}}checkOverlapNode(e,t){this.overlapNode=null,bfsWalk(this.mindMap.renderer.root,(i=>{if(i.nodeData.data.isActive&&this.mindMap.renderer.setNodeActive(i,!1),i===this.creatingStartNode||this.overlapNode)return;let{left:s,top:n,width:o,height:a}=i;e>=s&&e<=s+o&&t>=n&&t<=n+a&&(this.overlapNode=i)})),this.overlapNode&&!this.overlapNode.nodeData.data.isActive&&this.mindMap.renderer.setNodeActive(this.overlapNode,!0)}completeCreateLine(e){this.creatingStartNode!==e&&(this.addLine(this.creatingStartNode,e),this.overlapNode&&this.overlapNode.nodeData.data.isActive&&this.mindMap.renderer.setNodeActive(this.overlapNode,!1),this.isCreatingLine=!1,this.creatingStartNode=null,this.creatingLine.remove(),this.creatingLine=null,this.overlapNode=null)}addLine(e,t){if(!e||!t)return;let i=t.nodeData.data.id;i||(i=uuid(),this.mindMap.execCommand("SET_NODE_DATA",t,{id:i}));let s=e.nodeData.data.associativeLineTargets||[];s.push(i);let[n,o]=computeNodePoints(e,t),a=computeCubicBezierPathPoints(n.x,n.y,o.x,o.y),r=e.nodeData.data.associativeLineTargetControlOffsets||[];r[s.length-1]=[{x:a[0].x-n.x,y:a[0].y-n.y},{x:a[1].x-o.x,y:a[1].y-o.y}],this.mindMap.execCommand("SET_NODE_DATA",e,{associativeLineTargets:s,associativeLineTargetControlOffsets:r})}removeLine(){if(!this.activeLine)return;let[,,,e,t]=this.activeLine;this.removeControls();let{associativeLineTargets:i,associativeLineTargetControlOffsets:s,associativeLineText:n}=e.nodeData.data,o=getAssociativeLineTargetIndex(e,t),a={};n&&Object.keys(n).forEach((e=>{e!==t.nodeData.data.id&&(a[e]=n[e])})),this.mindMap.execCommand("SET_NODE_DATA",e,{associativeLineTargets:i.filter(((e,t)=>t!==o)),associativeLineTargetControlOffsets:s?s.filter(((e,t)=>t!==o)):[],associativeLineText:a})}clearActiveNodes(){this.mindMap.renderer.activeNodeList.length>0&&this.mindMap.execCommand("CLEAR_ACTIVE_NODE")}clearActiveLine(){if(this.activeLine){let[,e,t,i,s]=this.activeLine;e.stroke({color:"transparent"}),this.hideEditTextBox(),this.getText(i,s)||t.clear(),this.activeLine=null,this.removeControls()}}onNodeDragging(){this.isNodeDragging||(this.isNodeDragging=!0,this.lineList.forEach((e=>{e[0].hide(),e[1].hide(),e[2].hide()})),this.hideControls())}onNodeDragend(){this.isNodeDragging&&(this.lineList.forEach((e=>{e[0].show(),e[1].show(),e[2].show()})),this.showControls(),this.isNodeDragging=!1)}}AssociativeLine.instanceName="associativeLine";export default AssociativeLine;
