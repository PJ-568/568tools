import{CONSTANTS}from"../../constants/constant";class View{constructor(t={}){this.opt=t,this.mindMap=this.opt.mindMap,this.scale=1,this.sx=0,this.sy=0,this.x=0,this.y=0,this.firstDrag=!0,this.setTransformData(this.mindMap.opt.viewData),this.bind()}bind(){this.mindMap.keyCommand.addShortcut("Control+=",(()=>{this.enlarge()})),this.mindMap.keyCommand.addShortcut("Control+-",(()=>{this.narrow()})),this.mindMap.keyCommand.addShortcut("Control+Enter",(()=>{this.reset()})),this.mindMap.keyCommand.addShortcut("Control+i",(()=>{this.fit()})),this.mindMap.svg.on("dblclick",(()=>{this.reset()})),this.mindMap.event.on("mousedown",(()=>{this.sx=this.x,this.sy=this.y})),this.mindMap.event.on("drag",((t,s)=>{t.ctrlKey||(this.firstDrag&&(this.firstDrag=!1,this.mindMap.renderer.activeNodeList.length>0&&this.mindMap.execCommand("CLEAR_ACTIVE_NODE")),this.x=this.sx+s.mousemoveOffset.x,this.y=this.sy+s.mousemoveOffset.y,this.transform())})),this.mindMap.event.on("mouseup",(()=>{this.firstDrag=!0})),this.mindMap.event.on("mousewheel",((t,s,i,e)=>{let{customHandleMousewheel:a,mousewheelAction:h,mouseScaleCenterUseMousePosition:n,mousewheelMoveStep:r}=this.mindMap.opt;if(a&&"function"==typeof a)return a(t);if(h===CONSTANTS.MOUSE_WHEEL_ACTION.ZOOM){let i=n?t.clientX:void 0,e=n?t.clientY:void 0;switch(s){case CONSTANTS.DIR.UP:case CONSTANTS.DIR.LEFT:this.narrow(i,e);break;case CONSTANTS.DIR.DOWN:case CONSTANTS.DIR.RIGHT:this.enlarge(i,e)}}else{let t=r;switch(e&&(t=5),s){case CONSTANTS.DIR.DOWN:this.translateY(-t);break;case CONSTANTS.DIR.UP:this.translateY(t);break;case CONSTANTS.DIR.LEFT:this.translateX(-t);break;case CONSTANTS.DIR.RIGHT:this.translateX(t)}}}))}getTransformData(){return{transform:this.mindMap.draw.transform(),state:{scale:this.scale,x:this.x,y:this.y,sx:this.sx,sy:this.sy}}}setTransformData(t){t&&(Object.keys(t.state).forEach((s=>{this[s]=t.state[s]})),this.mindMap.draw.transform({...t.transform}),this.mindMap.emit("view_data_change",this.getTransformData()),this.mindMap.emit("scale",this.scale))}translateXY(t,s){this.x+=t,this.y+=s,this.transform()}translateX(t){this.x+=t,this.transform()}translateXTo(t){this.x=t,this.transform()}translateY(t){this.y+=t,this.transform()}translateYTo(t){this.y=t,this.transform()}transform(){this.mindMap.draw.transform({origin:[0,0],scale:this.scale,translate:[this.x,this.y]}),this.mindMap.emit("view_data_change",this.getTransformData())}reset(){let t=1!==this.scale;this.scale=1,this.x=0,this.y=0,this.transform(),t&&this.mindMap.emit("scale",this.scale)}narrow(t,s){const i=Math.max(this.scale-this.mindMap.opt.scaleRatio,.1);this.scaleInCenter(i,t,s),this.transform(),this.mindMap.emit("scale",this.scale)}enlarge(t,s){const i=this.scale+this.mindMap.opt.scaleRatio;this.scaleInCenter(i,t,s),this.transform(),this.mindMap.emit("scale",this.scale)}scaleInCenter(t,s,i){void 0!==s&&void 0!==i||(s=this.mindMap.width/2,i=this.mindMap.height/2);const e=1-t/this.scale,a=(s-this.x)*e,h=(i-this.y)*e;this.x+=a,this.y+=h,this.scale=t}setScale(t,s,i){void 0!==s&&void 0!==i?this.scaleInCenter(t,s,i):this.scale=t,this.transform(),this.mindMap.emit("scale",this.scale)}fit(){let{fitPadding:t}=this.mindMap.opt,s=this.mindMap.draw,i=s.transform(),e=s.rbox(),a=e.width/i.scaleX,h=e.height/i.scaleY,n=a/h,{width:r,height:o}=this.mindMap.el.getBoundingClientRect();r-=2*t,o-=2*t;let m=0,l="";if(a<=r&&h<=o)m=1,l=1;else{let t=0,s=0;n>r/o?(t=r,s=r/n,l=2):(s=o,t=o*n,l=3),m=t/a}this.setScale(m);let d=s.rbox(),c=0,p=0;1===l?(c=-d.x+t+(r-d.width)/2,p=-d.y+t+(o-d.height)/2):2===l?(c=-d.x+t,p=-d.y+t+(o-d.height)/2):3===l&&(c=-d.x+t+(r-d.width)/2,p=-d.y+t),this.translateXY(c,p)}}export default View;
