import{tagColorList,nodeDataNoStylePropList}from"../../../constants/constant";const rootProp=["paddingX","paddingY"],backgroundStyleProps=["backgroundColor","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize"];class Style{static setBackgroundStyle(t,e){if(!Style.cacheStyle){Style.cacheStyle={};let e=window.getComputedStyle(t);backgroundStyleProps.forEach((t=>{Style.cacheStyle[t]=e[t]}))}let{backgroundColor:o,backgroundImage:i,backgroundRepeat:r,backgroundPosition:l,backgroundSize:a}=e;t.style.backgroundColor=o,i?(t.style.backgroundImage=`url(${i})`,t.style.backgroundRepeat=r,t.style.backgroundPosition=l,t.style.backgroundSize=a):t.style.backgroundImage="none"}static removeBackgroundStyle(t){Style.cacheStyle&&(backgroundStyleProps.forEach((e=>{t.style[e]=Style.cacheStyle[e]})),Style.cacheStyle=null)}constructor(t){this.ctx=t}merge(t,e,o){let i=this.ctx.mindMap.themeConfig,r=i.node;if(e||rootProp.includes(t)?r=i:this.ctx.isGeneralization?r=i.generalization:0===this.ctx.layerIndex?r=i.root:1===this.ctx.layerIndex&&(r=i.second),void 0!==o?o:this.ctx.nodeData.data.isActive){if(this.ctx.nodeData.data.activeStyle&&void 0!==this.ctx.nodeData.data.activeStyle[t])return this.ctx.nodeData.data.activeStyle[t];if(r.active&&r.active[t])return r.active[t]}return void 0!==this.getSelfStyle(t)?this.getSelfStyle(t):r[t]}getStyle(t,e,o){return this.merge(t,e,o)}getSelfStyle(t){return this.ctx.nodeData.data[t]}rect(t){this.shape(t),t.radius(this.merge("borderRadius"))}shape(t){t.fill({color:this.merge("fillColor")}),t.stroke({color:this.merge("borderColor"),width:this.merge("borderWidth"),dasharray:this.merge("borderDasharray")})}text(t){t.fill({color:this.merge("color")}).css({"font-family":this.merge("fontFamily"),"font-size":this.merge("fontSize"),"font-weight":this.merge("fontWeight"),"font-style":this.merge("fontStyle"),"text-decoration":this.merge("textDecoration")})}createStyleText(){return`\n      color: ${this.merge("color")};\n      font-family: ${this.merge("fontFamily")};\n      font-size: ${this.merge("fontSize")+"px"};\n      font-weight: ${this.merge("fontWeight")};\n      font-style: ${this.merge("fontStyle")};\n      text-decoration: ${this.merge("textDecoration")}\n    `}getTextFontStyle(){return{italic:"italic"===this.merge("fontStyle"),bold:this.merge("fontWeight"),fontSize:this.merge("fontSize"),fontFamily:this.merge("fontFamily")}}domText(t,e=1,o){t.style.fontFamily=this.merge("fontFamily"),t.style.fontSize=this.merge("fontSize")*e+"px",t.style.fontWeight=this.merge("fontWeight")||"normal",t.style.lineHeight=o?this.merge("lineHeight"):"normal",t.style.fontStyle=this.merge("fontStyle")}tagText(t,e){t.fill({color:tagColorList[e].color}).css({"font-size":"12px"})}tagRect(t,e){t.fill({color:tagColorList[e].background})}iconNode(t){t.attr({fill:this.merge("color")})}line(t,{width:e,color:o,dasharray:i}={}){t.stroke({width:e,color:o,dasharray:i}).fill({color:"none"})}generalizationLine(t){t.stroke({width:this.merge("generalizationLineWidth",!0),color:this.merge("generalizationLineColor",!0)}).fill({color:"none"})}iconBtn(t,e,o){let{color:i,fill:r}=this.ctx.mindMap.opt.expandBtnStyle||{color:"#808080",fill:"#fff"};t.fill({color:i}),e.fill({color:i}),o.fill({color:r})}hasCustomStyle(){let t=!1;return Object.keys(this.ctx.nodeData.data).forEach((e=>{nodeDataNoStylePropList.includes(e)||(t=!0)})),t}}Style.cacheStyle=null;export default Style;
