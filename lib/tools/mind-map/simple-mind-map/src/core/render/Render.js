import merge from"deepmerge";import LogicalStructure from"../../layouts/LogicalStructure";import MindMap from"../../layouts/MindMap";import CatalogOrganization from"../../layouts/CatalogOrganization";import OrganizationStructure from"../../layouts/OrganizationStructure";import Timeline from"../../layouts/Timeline";import Fishbone from"../../layouts/Fishbone";import TextEdit from"./TextEdit";import{copyNodeTree,simpleDeepClone,walk}from"../../utils";import{shapeList}from"./node/Shape";import{lineStyleProps}from"../../themes/default";import{CONSTANTS}from"../../constants/constant";const layouts={[CONSTANTS.LAYOUT.LOGICAL_STRUCTURE]:LogicalStructure,[CONSTANTS.LAYOUT.MIND_MAP]:MindMap,[CONSTANTS.LAYOUT.CATALOG_ORGANIZATION]:CatalogOrganization,[CONSTANTS.LAYOUT.ORGANIZATION_STRUCTURE]:OrganizationStructure,[CONSTANTS.LAYOUT.TIMELINE]:Timeline,[CONSTANTS.LAYOUT.TIMELINE2]:Timeline,[CONSTANTS.LAYOUT.FISHBONE]:Fishbone};class Render{constructor(e={}){this.opt=e,this.mindMap=e.mindMap,this.themeConfig=this.mindMap.themeConfig,this.draw=this.mindMap.draw,this.renderTree=merge({},this.mindMap.opt.data||{}),this.reRender=!1,this.isRendering=!1,this.hasWaitRendering=!1,this.nodeCache={},this.lastNodeCache={},this.renderSource="",this.activeNodeList=[],this.root=null,this.textEdit=new TextEdit(this),this.setLayout(),this.bindEvent(),this.registerCommands(),this.registerShortcutKeys()}setLayout(){this.layout=new(layouts[this.mindMap.opt.layout]?layouts[this.mindMap.opt.layout]:layouts[CONSTANTS.LAYOUT.LOGICAL_STRUCTURE])(this,this.mindMap.opt.layout)}bindEvent(){this.mindMap.on("draw_click",(e=>{let t=!0,{useLeftKeySelectionRightKeyDrag:i}=this.mindMap.opt;if(i){let i=this.mindMap.event.mousedownPos;t=Math.abs(e.clientX-i.x)<=5&&Math.abs(e.clientY-i.y)<=5}t&&this.activeNodeList.length>0&&this.mindMap.execCommand("CLEAR_ACTIVE_NODE")}))}registerCommands(){this.selectAll=this.selectAll.bind(this),this.mindMap.command.add("SELECT_ALL",this.selectAll),this.back=this.back.bind(this),this.mindMap.command.add("BACK",this.back),this.forward=this.forward.bind(this),this.mindMap.command.add("FORWARD",this.forward),this.insertNode=this.insertNode.bind(this),this.mindMap.command.add("INSERT_NODE",this.insertNode),this.insertChildNode=this.insertChildNode.bind(this),this.mindMap.command.add("INSERT_CHILD_NODE",this.insertChildNode),this.upNode=this.upNode.bind(this),this.mindMap.command.add("UP_NODE",this.upNode),this.downNode=this.downNode.bind(this),this.mindMap.command.add("DOWN_NODE",this.downNode),this.insertAfter=this.insertAfter.bind(this),this.mindMap.command.add("INSERT_AFTER",this.insertAfter),this.insertBefore=this.insertBefore.bind(this),this.mindMap.command.add("INSERT_BEFORE",this.insertBefore),this.moveNodeTo=this.moveNodeTo.bind(this),this.mindMap.command.add("MOVE_NODE_TO",this.moveNodeTo),this.removeNode=this.removeNode.bind(this),this.mindMap.command.add("REMOVE_NODE",this.removeNode),this.pasteNode=this.pasteNode.bind(this),this.mindMap.command.add("PASTE_NODE",this.pasteNode),this.cutNode=this.cutNode.bind(this),this.mindMap.command.add("CUT_NODE",this.cutNode),this.setNodeStyle=this.setNodeStyle.bind(this),this.mindMap.command.add("SET_NODE_STYLE",this.setNodeStyle),this.setNodeActive=this.setNodeActive.bind(this),this.mindMap.command.add("SET_NODE_ACTIVE",this.setNodeActive),this.clearAllActive=this.clearAllActive.bind(this),this.mindMap.command.add("CLEAR_ACTIVE_NODE",this.clearAllActive),this.setNodeExpand=this.setNodeExpand.bind(this),this.mindMap.command.add("SET_NODE_EXPAND",this.setNodeExpand),this.expandAllNode=this.expandAllNode.bind(this),this.mindMap.command.add("EXPAND_ALL",this.expandAllNode),this.unexpandAllNode=this.unexpandAllNode.bind(this),this.mindMap.command.add("UNEXPAND_ALL",this.unexpandAllNode),this.expandToLevel=this.expandToLevel.bind(this),this.mindMap.command.add("UNEXPAND_TO_LEVEL",this.expandToLevel),this.setNodeData=this.setNodeData.bind(this),this.mindMap.command.add("SET_NODE_DATA",this.setNodeData),this.setNodeText=this.setNodeText.bind(this),this.mindMap.command.add("SET_NODE_TEXT",this.setNodeText),this.setNodeImage=this.setNodeImage.bind(this),this.mindMap.command.add("SET_NODE_IMAGE",this.setNodeImage),this.setNodeIcon=this.setNodeIcon.bind(this),this.mindMap.command.add("SET_NODE_ICON",this.setNodeIcon),this.setNodeHyperlink=this.setNodeHyperlink.bind(this),this.mindMap.command.add("SET_NODE_HYPERLINK",this.setNodeHyperlink),this.setNodeNote=this.setNodeNote.bind(this),this.mindMap.command.add("SET_NODE_NOTE",this.setNodeNote),this.setNodeTag=this.setNodeTag.bind(this),this.mindMap.command.add("SET_NODE_TAG",this.setNodeTag),this.addGeneralization=this.addGeneralization.bind(this),this.mindMap.command.add("ADD_GENERALIZATION",this.addGeneralization),this.removeGeneralization=this.removeGeneralization.bind(this),this.mindMap.command.add("REMOVE_GENERALIZATION",this.removeGeneralization),this.setNodeCustomPosition=this.setNodeCustomPosition.bind(this),this.mindMap.command.add("SET_NODE_CUSTOM_POSITION",this.setNodeCustomPosition),this.resetLayout=this.resetLayout.bind(this),this.mindMap.command.add("RESET_LAYOUT",this.resetLayout),this.setNodeShape=this.setNodeShape.bind(this),this.mindMap.command.add("SET_NODE_SHAPE",this.setNodeShape)}registerShortcutKeys(){this.mindMap.keyCommand.addShortcut("Tab",(()=>{this.mindMap.execCommand("INSERT_CHILD_NODE")})),this.insertNodeWrap=()=>{this.textEdit.showTextEdit||this.mindMap.execCommand("INSERT_NODE")},this.mindMap.keyCommand.addShortcut("Enter",this.insertNodeWrap),this.mindMap.keyCommand.addShortcut("Control+s",this.addGeneralization),this.toggleActiveExpand=this.toggleActiveExpand.bind(this),this.mindMap.keyCommand.addShortcut("/",this.toggleActiveExpand),this.removeNodeWrap=()=>{this.mindMap.execCommand("REMOVE_NODE")},this.mindMap.keyCommand.addShortcut("Del|Backspace",this.removeNodeWrap),this.mindMap.on("before_show_text_edit",(()=>{this.startTextEdit()})),this.mindMap.on("hide_text_edit",(()=>{this.endTextEdit()})),this.mindMap.keyCommand.addShortcut("Control+a",(()=>{this.mindMap.execCommand("SELECT_ALL")})),this.mindMap.keyCommand.addShortcut("Control+l",this.resetLayout),this.mindMap.keyCommand.addShortcut("Control+Up",this.upNode),this.mindMap.keyCommand.addShortcut("Control+Down",this.downNode)}startTextEdit(){this.mindMap.keyCommand.save()}endTextEdit(){this.mindMap.keyCommand.restore()}render(e=(()=>{}),t){let i=Date.now();this.isRendering?this.hasWaitRendering=!0:(this.isRendering=!0,this.renderSource=t,this.lastNodeCache=this.nodeCache,this.nodeCache={},this.reRender&&this.clearActive(),this.layout.doLayout((d=>{Object.keys(this.lastNodeCache).forEach((e=>{this.nodeCache[e]||(this.lastNodeCache[e].destroy(),this.lastNodeCache[e].parent&&this.lastNodeCache[e].parent.removeLine())})),this.root=d;const n=()=>{this.isRendering=!1,this.mindMap.emit("node_tree_render_end"),e&&e(),this.hasWaitRendering?(this.hasWaitRendering=!1,this.render(e,t)):this.mindMap.richText&&[CONSTANTS.CHANGE_THEME,CONSTANTS.SET_DATA].includes(t)&&this.mindMap.command.addHistory()};let{enableNodeTransitionMove:a,nodeTransitionMoveDuration:s}=this.mindMap.opt;this.root.render((()=>{let e=Date.now()-i;a&&e<=s?setTimeout((()=>{n()}),s-e):n()}))})),this.mindMap.emit("node_active",null,this.activeNodeList))}clearActive(){this.activeNodeList.forEach((e=>{this.setNodeActive(e,!1)})),this.activeNodeList=[]}clearAllActive(){this.activeNodeList.length<=0||(this.clearActive(),this.mindMap.emit("node_active",null,[]))}addActiveNode(e){-1===this.findActiveNodeIndex(e)&&this.activeNodeList.push(e)}removeActiveNode(e){let t=this.findActiveNodeIndex(e);-1!==t&&this.activeNodeList.splice(t,1)}findActiveNodeIndex(e){return this.activeNodeList.findIndex((t=>t===e))}getNodeIndex(e){return e.parent?e.parent.children.findIndex((t=>t===e)):0}selectAll(){walk(this.root,null,(e=>{e.nodeData.data.isActive||(e.nodeData.data.isActive=!0,this.addActiveNode(e),e.showExpandBtn(),setTimeout((()=>{e.updateNodeShape()}),0))}),null,!0,0,0)}back(e){this.clearAllActive();let t=this.mindMap.command.back(e);t&&(this.renderTree=t,this.mindMap.render())}forward(e){this.clearAllActive();let t=this.mindMap.command.forward(e);t&&(this.renderTree=t,this.mindMap.render())}formatAppointNodes(e){return e?Array.isArray(e)?e:[e]:[]}insertNode(e=!0,t=[],i=null){if(t=this.formatAppointNodes(t),this.activeNodeList.length<=0&&t.length<=0)return;let{defaultInsertSecondLevelNodeText:d,defaultInsertBelowSecondLevelNodeText:n}=this.mindMap.opt,a=(t.length>0?t:this.activeNodeList)[0];if(!a.isGeneralization)if(a.isRoot)this.insertChildNode(e,t,i);else{let t=1===a.layerIndex?d:n;1===a.layerIndex&&a.parent.destroy();let s=this.getNodeIndex(a);a.parent.nodeData.children.splice(s+1,0,{inserting:e,data:{text:t,expand:!0,...i||{}},children:[]}),this.mindMap.render()}}insertChildNode(e=!0,t=[],i=null){if(t=this.formatAppointNodes(t),this.activeNodeList.length<=0&&t.length<=0)return;let{defaultInsertSecondLevelNodeText:d,defaultInsertBelowSecondLevelNodeText:n}=this.mindMap.opt;(t.length>0?t:this.activeNodeList).forEach((t=>{if(t.isGeneralization)return;t.nodeData.children||(t.nodeData.children=[]);let a=t.isRoot?d:n;t.nodeData.children.push({inserting:e,data:{text:a,expand:!0,...i||{}},children:[]}),t.nodeData.data.expand=!0,t.isRoot&&t.destroy()})),this.mindMap.render()}upNode(){if(this.activeNodeList.length<=0)return;let e=this.activeNodeList[0];if(e.isRoot)return;let t=e.parent,i=t.children,d=i.findIndex((t=>t===e));if(-1===d||0===d)return;let n=d-1;i.splice(d,1),i.splice(n,0,e),t.nodeData.children.splice(d,1),t.nodeData.children.splice(n,0,e.nodeData),this.mindMap.render()}downNode(){if(this.activeNodeList.length<=0)return;let e=this.activeNodeList[0];if(e.isRoot)return;let t=e.parent,i=t.children,d=i.findIndex((t=>t===e));if(-1===d||d===i.length-1)return;let n=d+1;i.splice(d,1),i.splice(n,0,e),t.nodeData.children.splice(d,1),t.nodeData.children.splice(n,0,e.nodeData),this.mindMap.render()}insertBefore(e,t){if(e.isRoot)return;let i=1===e.layerIndex&&1!==t.layerIndex||1!==e.layerIndex&&1===t.layerIndex,d=e.parent,n=d.children,a=n.findIndex((t=>t===e));if(-1===a)return;n.splice(a,1),d.nodeData.children.splice(a,1);let s=t.parent,o=s.children,h=o.findIndex((e=>e===t));-1!==h&&(o.splice(h,0,e),s.nodeData.children.splice(h,0,e.nodeData),this.mindMap.render((()=>{i&&e.reRender()})))}insertAfter(e,t){if(e.isRoot)return;let i=1===e.layerIndex&&1!==t.layerIndex||1!==e.layerIndex&&1===t.layerIndex,d=e.parent,n=d.children,a=n.findIndex((t=>t===e));if(-1===a)return;n.splice(a,1),d.nodeData.children.splice(a,1);let s=t.parent,o=s.children,h=o.findIndex((e=>e===t));-1!==h&&(h++,o.splice(h,0,e),s.nodeData.children.splice(h,0,e.nodeData),this.mindMap.render((()=>{i&&e.reRender()})))}removeNode(e=[]){if(e=this.formatAppointNodes(e),this.activeNodeList.length<=0&&e.length<=0)return;let t=e.length>0,i=t?e:this.activeNodeList,d=i.find((e=>e.isRoot));if(d)this.clearActive(),d.children.forEach((e=>{e.remove()})),d.children=[],d.nodeData.children=[];else for(let e=0;e<i.length;e++){let d=i[e];t&&i.splice(e,1),d.isGeneralization?(this.setNodeData(d.generalizationBelongNode,{generalization:null}),d.generalizationBelongNode.update(),this.removeActiveNode(d),e--):(this.removeActiveNode(d),this.removeOneNode(d),e--)}this.mindMap.emit("node_active",null,this.activeNodeList),this.mindMap.render()}removeOneNode(e){let t=this.getNodeIndex(e);e.remove(),e.parent.children.splice(t,1),e.parent.nodeData.children.splice(t,1)}copyNode(){if(!(this.activeNodeList.length<=0))return copyNodeTree({},this.activeNodeList[0],!0)}cutNode(e){if(this.activeNodeList.length<=0)return;let t=this.activeNodeList[0];if(t.isRoot)return null;let i=copyNodeTree({},t,!0);this.removeActiveNode(t),this.removeOneNode(t),this.mindMap.emit("node_active",null,this.activeNodeList),this.mindMap.render(),e&&"function"==typeof e&&e(i)}moveNodeTo(e,t){if(e.isRoot)return;let i=copyNodeTree({},e,!1,!0);this.removeActiveNode(e),this.removeOneNode(e),this.mindMap.emit("node_active",null,this.activeNodeList),t.nodeData.children.push(i),this.mindMap.render(),t.isRoot&&t.destroy()}pasteNode(e){this.activeNodeList.length<=0||(this.activeNodeList.forEach((t=>{t.nodeData.children.push(simpleDeepClone(e))})),this.mindMap.render())}setNodeStyle(e,t,i,d){let n={};if(n=d?{activeStyle:{...e.nodeData.data.activeStyle||{},[t]:i}}:{[t]:i},this.mindMap.richText){let d=this.mindMap.richText.normalStyleToRichTextStyle({[t]:i});Object.keys(d).length>0&&(this.mindMap.richText.showEditText(e),this.mindMap.richText.formatAllText(d),this.mindMap.richText.hideEditText([e]))}this.setNodeDataRender(e,n),lineStyleProps.includes(t)&&(e.parent||e).renderLine(!0)}setNodeActive(e,t){this.setNodeData(e,{isActive:t}),t?e.showExpandBtn():e.hideExpandBtn(),e.updateNodeShape()}setNodeExpand(e,t){this.setNodeData(e,{expand:t}),t?(e.children.forEach((e=>{e.render()})),e.renderLine()):(e.children.forEach((e=>{e.remove()})),e.removeLine()),this.mindMap.render()}expandAllNode(){walk(this.renderTree,null,(e=>{e.data.expand||(e.data.expand=!0)}),null,!0,0,0),this.mindMap.render()}unexpandAllNode(){walk(this.renderTree,null,((e,t,i)=>{e._node=null,i||(e.data.expand=!1)}),null,!0,0,0),this.mindMap.render((()=>{this.mindMap.view.reset()}))}expandToLevel(e){walk(this.renderTree,null,((t,i,d,n)=>{t._node=null,t.data.expand=n<e}),null,!0,0,0),this.mindMap.render()}toggleActiveExpand(){this.activeNodeList.forEach((e=>{e.nodeData.children.length<=0||this.toggleNodeExpand(e)}))}toggleNodeExpand(e){this.mindMap.execCommand("SET_NODE_EXPAND",e,!e.nodeData.data.expand)}setNodeText(e,t,i){this.setNodeDataRender(e,{text:t,richText:i})}setNodeImage(e,{url:t,title:i,width:d,height:n}){this.setNodeDataRender(e,{image:t,imageTitle:i||"",imageSize:{width:d,height:n}})}setNodeIcon(e,t){this.setNodeDataRender(e,{icon:t})}setNodeHyperlink(e,t,i=""){this.setNodeDataRender(e,{hyperlink:t,hyperlinkTitle:i})}setNodeNote(e,t){this.setNodeDataRender(e,{note:t})}setNodeTag(e,t){this.setNodeDataRender(e,{tag:t})}addGeneralization(e){this.activeNodeList.length<=0||(this.activeNodeList.forEach((t=>{t.nodeData.data.generalization||t.isRoot||(this.setNodeData(t,{generalization:e||{text:"概要"}}),t.update())})),this.mindMap.render())}removeGeneralization(){this.activeNodeList.length<=0||(this.activeNodeList.forEach((e=>{e.nodeData.data.generalization&&(this.setNodeData(e,{generalization:null}),e.update())})),this.mindMap.render())}setNodeCustomPosition(e,t=void 0,i=void 0){([e]||this.activeNodeList).forEach((e=>{this.setNodeData(e,{customLeft:t,customTop:i})}))}resetLayout(){walk(this.root,null,(e=>{e.customLeft=void 0,e.customTop=void 0,this.setNodeData(e,{customLeft:void 0,customTop:void 0}),this.mindMap.render()}),null,!0,0,0)}setNodeShape(e,t){if(!t||!shapeList.includes(t))return;([e]||this.activeNodeList).forEach((e=>{this.setNodeStyle(e,"shape",t)}))}setNodeData(e,t){Object.keys(t).forEach((i=>{e.nodeData.data[i]=t[i]}))}setNodeDataRender(e,t){this.setNodeData(e,t),e.reRender()&&(e.isGeneralization&&e.generalizationBelongNode.updateGeneralization(),this.mindMap.render())}moveNodeToCenter(e){let t=this.mindMap.width/2,i=this.mindMap.height/2,{left:d,top:n,width:a,height:s}=e,o=d+a/2,h=n+s/2,{state:r}=this.mindMap.view.getTransformData(),l=t-r.x-o,m=i-r.y-h;this.mindMap.view.translateX(l),this.mindMap.view.translateY(m),this.mindMap.view.setScale(1)}}export default Render;
