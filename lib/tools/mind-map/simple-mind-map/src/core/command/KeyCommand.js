import{keyMap}from"./keyMap";export default class KeyCommand{constructor(t){this.opt=t,this.mindMap=t.mindMap,this.shortcutMap={},this.shortcutMapCache={},this.isPause=!1,this.isInSvg=!1,this.bindEvent()}pause(){this.isPause=!0}recovery(){this.isPause=!1}save(){this.shortcutMapCache=this.shortcutMap,this.shortcutMap={}}restore(){this.shortcutMap=this.shortcutMapCache,this.shortcutMapCache={}}bindEvent(){this.mindMap.on("svg_mouseenter",(()=>{this.isInSvg=!0})),this.mindMap.on("svg_mouseleave",(()=>{this.mindMap.richText&&this.mindMap.richText.showTextEdit||this.mindMap.renderer.textEdit.showTextEdit||this.mindMap.associativeLine&&this.mindMap.associativeLine.showTextEdit||(this.isInSvg=!1)})),window.addEventListener("keydown",(t=>{this.isPause||this.mindMap.opt.enableShortcutOnlyWhenMouseInSvg&&!this.isInSvg||Object.keys(this.shortcutMap).forEach((s=>{this.checkKey(t,s)&&(t.stopPropagation(),t.preventDefault(),this.shortcutMap[s].forEach((t=>{t()})))}))}))}checkKey(t,s){let e=this.getOriginEventCodeArr(t),i=this.getKeyCodeArr(s);if(e.length!==i.length)return!1;for(let t=0;t<e.length;t++){let s=i.findIndex((s=>s===e[t]));if(-1===s)return!1;i.splice(s,1)}return!0}getOriginEventCodeArr(t){let s=[];return(t.ctrlKey||t.metaKey)&&s.push(keyMap.Control),t.altKey&&s.push(keyMap.Alt),t.shiftKey&&s.push(keyMap.Shift),s.includes(t.keyCode)||s.push(t.keyCode),s}getKeyCodeArr(t){let s=t.split(/\s*\+\s*/),e=[];return s.forEach((t=>{e.push(keyMap[t])})),e}addShortcut(t,s){t.split(/\s*\|\s*/).forEach((t=>{this.shortcutMap[t]?this.shortcutMap[t].push(s):this.shortcutMap[t]=[s]}))}removeShortcut(t,s){t.split(/\s*\|\s*/).forEach((t=>{if(this.shortcutMap[t])if(s){let e=this.shortcutMap[t].findIndex((t=>t===s));-1!==e&&this.shortcutMap[t].splice(e,1)}else this.shortcutMap[t]=[],delete this.shortcutMap[t]}))}getShortcutFn(t){let s=[];return t.split(/\s*\|\s*/).forEach((t=>{s=this.shortcutMap[t]||[]})),s}}
