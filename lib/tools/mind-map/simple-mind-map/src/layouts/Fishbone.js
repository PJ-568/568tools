import Base from"./Base";import{walk,asyncRun,degToRad}from"../utils";import{CONSTANTS}from"../constants/constant";import utils from"./fishboneUtils";class Fishbone extends Base{constructor(t={}){super(t),this.indent=.3,this.childIndent=.5}doLayout(t){asyncRun([()=>{this.computedBaseValue()},()=>{this.computedLeftTopValue()},()=>{this.adjustLeftTopValue()},()=>{t(this.root)}])}computedBaseValue(){walk(this.renderer.renderTree,null,((t,e,i,h,o)=>{let n=this.createNode(t,e,i,h);if(i?this.setNodeCenter(n):(e._node.dir?n.dir=e._node.dir:n.dir=o%2==0?CONSTANTS.TIMELINE_DIR.TOP:CONSTANTS.TIMELINE_DIR.BOTTOM,e._node.isRoot&&(this.checkIsTop(n)?n.top=e._node.top-n.height:n.top=e._node.top+e._node.height)),!t.data.expand)return!0}),null,!0,0)}computedLeftTopValue(){walk(this.root,null,((t,e,i,h)=>{if(t.isRoot){let e=t.left+t.width+t.height,i=t.left+t.width+t.height;t.children.forEach((t=>{this.checkIsTop(t)?(t.left=e,e+=t.width):(t.left=i+20,i+=t.width)}))}let o={layerIndex:h,node:t,ctx:this};this.checkIsTop(t)?utils.top.computedLeftTopValue(o):utils.bottom.computedLeftTopValue(o)}),null,!0)}adjustLeftTopValue(){walk(this.root,null,((t,e,i,h)=>{if(!t.nodeData.data.expand)return;let o={node:t,parent:e,layerIndex:h,ctx:this};this.checkIsTop(t)?utils.top.adjustLeftTopValueBefore(o):utils.bottom.adjustLeftTopValueBefore(o)}),((t,e)=>{let i={parent:e,node:t,ctx:this};if(this.checkIsTop(t)?utils.top.adjustLeftTopValueAfter(i):utils.bottom.adjustLeftTopValueAfter(i),t.isRoot){let e=0,i=0;t.children.forEach((t=>{if(this.checkIsTop(t)){t.left+=e,this.updateChildren(t.children,"left",e);let{left:i,right:h}=this.getNodeBoundaries(t,"h");e+=h-i}else{t.left+=i,this.updateChildren(t.children,"left",i);let{left:e,right:h}=this.getNodeBoundaries(t,"h");i+=h-e}}))}}),!0)}getNodeAreaHeight(t){let e=0,i=t=>{e+=t.height+(this.getNodeActChildrenLength(t)>0?t.expandBtnSize:0),t.children.length&&t.children.forEach((t=>{i(t)}))};return i(t),e}updateBrothersLeft(t){let e=t.children,i=0;e.forEach((t=>{t.left+=i,t.children&&t.children.length&&this.updateChildren(t.children,"left",i);let{left:e,right:h}=this.getNodeBoundaries(t,"h"),o=h-e-t.width;o>0&&(i+=o)}))}updateBrothersTop(t,e){if(t.parent&&!t.parent.isRoot){let i=t.parent.children,h=i.findIndex((e=>e===t));i.forEach(((t,i)=>{if(t.hasCustomPosition())return;let o=0;i>h&&(o=e),t.top+=o,t.children&&t.children.length&&this.updateChildren(t.children,"top",o)})),this.checkIsTop(t)?this.updateBrothersTop(t.parent,e):this.updateBrothersTop(t.parent,3===t.layerIndex?0:e)}}checkIsTop(t){return t.dir===CONSTANTS.TIMELINE_DIR.TOP}renderLine(t,e,i){if(1!==t.layerIndex&&t.children.length<=0)return[];let{top:h,height:o,expandBtnSize:n}=t;this.mindMap.opt.alwaysShowExpandBtn||(n=0);let l=t.children.length;if(t.isRoot){let e=-1/0;t.children.forEach((h=>{h.left>e&&(e=h.left);let o=h.left,n=t.height/2,l=n/Math.tan(degToRad(this.mindMap.opt.fishboneDeg)),d=this.draw.path();this.checkIsTop(h)?d.plot(`M ${o-l},${h.top+h.height+n} L ${h.left},${h.top+h.height}`):d.plot(`M ${o-l},${h.top-n} L ${o},${h.top}`),t.style.line(d),t._lines.push(d),i&&i(d,t)}));let h=t.top+t.height/2,o=t.height/2,n=this.draw.path();n.plot(`M ${t.left+t.width},${h} L ${e-o/Math.tan(degToRad(this.mindMap.opt.fishboneDeg))},${h}`),t.style.line(n),t._lines.push(n),i&&i(n,t)}else{let d=-1/0,r=1/0,s=-1/0,a=t.left+t.width*this.indent;if(t.children.forEach(((h,o)=>{h.left>s&&(s=h.left);let n=h.top+h.height/2;if(n>d&&(d=n),n<r&&(r=n),t.layerIndex>1){let t=`M ${a},${n} L ${h.left},${n}`;e[o].plot(t),i&&i(e[o],h)}})),l>=0){let e=this.draw.path();n=l>0?n:0;let p=s-t.left-t.width*this.indent;p=Math.max(p,0);let u={node:t,line:e,top:h,x:a,lineLength:p,height:o,expandBtnSize:n,maxy:d,miny:r,ctx:this};this.checkIsTop(t)?utils.top.renderLine(u):utils.bottom.renderLine(u),t.style.line(e),t._lines.push(e),i&&i(e,t)}}}renderExpandBtn(t,e){let{width:i,height:h,expandBtnSize:o,isRoot:n}=t;if(!n){let{translateX:n,translateY:l}=e.transform(),d={node:t,btn:e,expandBtnSize:o,translateX:n,translateY:l,width:i,height:h};this.checkIsTop(t)?utils.top.renderExpandBtn(d):utils.bottom.renderExpandBtn(d)}}renderGeneralization(t,e,i){let{top:h,bottom:o,right:n,generalizationLineMargin:l,generalizationNodeMargin:d}=this.getNodeBoundaries(t,"h"),r=n+l,s=`M ${r},${h} Q ${r+20},${h+(o-h)/2} ${n+l},${o}`;e.plot(s),i.left=n+d,i.top=h+(o-h-i.height)/2}}export default Fishbone;
