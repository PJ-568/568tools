var MonacoVim,MonacoEmacs,layout,sourceEditor,stdinEditor,stdoutEditor,currentLanguageId,$selectLanguage,$compilerOptions,$commandLineArguments,$insertTemplateBtn,$runBtn,$navigationMessage,$updates,$statusLine,timeStart,timeEnd,messagesData,defaultUrl=localStorageGetItem("api-url")||"https://ce.judge0.com",apiUrl=defaultUrl,wait=localStorageGetItem("wait")||!0,check_timeout=300,blinkStatusLine="true"===(localStorageGetItem("blink")||"true"),editorMode=localStorageGetItem("editorMode")||"normal",editorModeObject=null,fontSize=14,isEditorDirty=!1,layoutConfig={settings:{showPopoutIcon:!1,reorderEnabled:!0},dimensions:{borderWidth:3,headerHeight:22},content:[{type:"column",content:[{type:"component",height:70,componentName:"source",id:"source",title:"SOURCE",isClosable:!1,componentState:{readOnly:!1}},{type:"stack",content:[{type:"component",componentName:"stdin",id:"stdin",title:"Input",isClosable:!1,componentState:{readOnly:!1}},{type:"component",componentName:"stdout",id:"stdout",title:"Output",isClosable:!1,componentState:{readOnly:!0}}]}]}]};function encode(e){return btoa(unescape(encodeURIComponent(e||"")))}function decode(e){var n=escape(atob(e||""));try{return decodeURIComponent(n)}catch{return unescape(n)}}function localStorageSetItem(e,n){try{localStorage.setItem(e,n)}catch(e){}}function localStorageGetItem(e){try{return localStorage.getItem(e)}catch(e){return null}}function showMessages(){var e=$updates.offset().left-parseFloat($updates.css("padding-left"))-$navigationMessage.parent().offset().left-parseFloat($navigationMessage.parent().css("padding-left"))-5;if(!(e<200||void 0===messagesData)){var n=messagesData.messages;$navigationMessage.css("animation-duration",messagesData.duration),$navigationMessage.parent().width(e-5);for(var t="",o=0;o<n.length;++o)t+=`${n[o]}`,o!=n.length-1&&(t+="&nbsp".repeat(Math.min(200,n[o].length)));$navigationMessage.html(t)}}function loadMessages(){$.ajax({url:`https://minio.judge0.com/public/ide/messages.json?${Date.now()}`,type:"GET",headers:{Accept:"application/json"},success:function(e,n,t){messagesData=e,showMessages()}})}function showError(e,n){$("#site-modal #title").html(e),$("#site-modal .content").html(n),$("#site-modal").modal("show")}function handleError(e,n,t){showError(`${e.statusText} (${e.status})`,`<pre>${JSON.stringify(e,null,4)}</pre>`)}function handleRunError(e,n,t){handleError(e,n,t),$runBtn.removeClass("loading")}function handleResult(e){timeEnd=performance.now(),console.log("It took "+(timeEnd-timeStart)+" ms to get submission result.");var n=e.status,t=decode(e.stdout),o=decode(e.compile_output),r=null===e.time?"-":e.time+"s",a=null===e.memory?"-":e.memory+"KB";$statusLine.html(`${n.description}, ${r}, ${a}`),blinkStatusLine&&($statusLine.addClass("blink"),setTimeout((function(){blinkStatusLine=!1,localStorageSetItem("blink","false"),$statusLine.removeClass("blink")}),3e3));var i=[o,t].join("\n").trim();if(stdoutEditor.setValue(i),""!==i){var s=document.getElementById("stdout-dot");s.parentElement.classList.contains("lm_active")||(s.hidden=!1)}$runBtn.removeClass("loading")}function getIdFromURI(){return location.search.substr(1).trim().split("&")[0]}function downloadSource(){var e=parseInt($selectLanguage.val());download(sourceEditor.getValue(),fileNames[e],"text/plain")}function loadSavedSource(){snippet_id=getIdFromURI(),36==snippet_id.length?$.ajax({url:apiUrl+"/submissions/"+snippet_id+"?fields=source_code,language_id,stdin,stdout,stderr,compile_output,message,time,memory,status,compiler_options,command_line_arguments&base64_encoded=true",type:"GET",success:function(e,n,t){sourceEditor.setValue(decode(e.source_code)),$selectLanguage.dropdown("set selected",e.language_id),$compilerOptions.val(e.compiler_options),$commandLineArguments.val(e.command_line_arguments),stdinEditor.setValue(decode(e.stdin)),stdoutEditor.setValue(decode(e.stdout));var o=null===e.time?"-":e.time+"s",r=null===e.memory?"-":e.memory+"KB";$statusLine.html(`${e.status.description}, ${o}, ${r}`),changeEditorLanguage()},error:handleRunError}):loadRandomLanguage()}function run(){if(""!==sourceEditor.getValue().trim()){$runBtn.addClass("loading"),document.getElementById("stdout-dot").hidden=!0,stdoutEditor.setValue("");var e=layout.root.getItemsById("stdout")[0];e.parent.header.parent.setActiveContentItem(e);var n=encode(sourceEditor.getValue()),t=encode(stdinEditor.getValue()),o=resolveLanguageId($selectLanguage.val()),r=$compilerOptions.val(),a=$commandLineArguments.val();44===parseInt(o)&&(n=sourceEditor.getValue());var i={source_code:n,language_id:o,stdin:t,compiler_options:r,command_line_arguments:a,redirect_stderr_to_stdout:!0},s=function(e){timeStart=performance.now(),$.ajax({url:apiUrl+`/submissions?base64_encoded=true&wait=${wait}`,type:"POST",async:!0,contentType:"application/json",data:JSON.stringify(e),xhrFields:{withCredentials:-1!=apiUrl.indexOf("/secure")},success:function(e,n,t){console.log(`Your submission token is: ${e.token}`),1==wait?handleResult(e):setTimeout(fetchSubmission.bind(null,e.token),check_timeout)},error:handleRunError})},l=!1;82===parseInt(o)&&(""===sqliteAdditionalFiles?(l=!0,$.ajax({url:`https://minio.judge0.com/public/ide/sqliteAdditionalFiles.base64.txt?${Date.now()}`,type:"GET",async:!0,contentType:"text/plain",success:function(e,n,t){sqliteAdditionalFiles=e,i.additional_files=sqliteAdditionalFiles,s(i)},error:handleRunError})):i.additional_files=sqliteAdditionalFiles),l||s(i)}else showError("Error","Source code can't be empty!")}function fetchSubmission(e){$.ajax({url:apiUrl+"/submissions/"+e+"?base64_encoded=true",type:"GET",async:!0,success:function(n,t,o){n.status.id<=2?setTimeout(fetchSubmission.bind(null,e),check_timeout):handleResult(n)},error:handleRunError})}function changeEditorLanguage(){monaco.editor.setModelLanguage(sourceEditor.getModel(),$selectLanguage.find(":selected").attr("mode")),currentLanguageId=parseInt($selectLanguage.val()),$(".lm_title")[0].innerText=fileNames[currentLanguageId],apiUrl=resolveApiUrl($selectLanguage.val())}function insertTemplate(){currentLanguageId=parseInt($selectLanguage.val()),sourceEditor.setValue(sources[currentLanguageId]),stdinEditor.setValue(inputs[currentLanguageId]||""),$compilerOptions.val(compilerOptions[currentLanguageId]||""),changeEditorLanguage()}function loadRandomLanguage(){for(var e=[],n=0;n<$selectLanguage[0].options.length;++n)e.push($selectLanguage[0].options[n].value);$selectLanguage.dropdown("set selected",e[19]),apiUrl=resolveApiUrl($selectLanguage.val()),insertTemplate()}function resizeEditor(e){if("normal"!=editorMode){var n=$("#editor-status-line").height();e.height-=n,e.contentHeight-=n}}function disposeEditorModeObject(){try{editorModeObject.dispose(),editorModeObject=null}catch(e){}}function changeEditorMode(){if(disposeEditorModeObject(),"vim"==editorMode)editorModeObject=MonacoVim.initVimMode(sourceEditor,$("#editor-status-line")[0]);else if("emacs"==editorMode){var e=$("#editor-status-line")[0];(editorModeObject=new MonacoEmacs.EmacsExtension(sourceEditor)).onDidMarkChange((function(n){e.textContent=n?"Mark Set!":"Mark Unset"})),editorModeObject.onDidChangeKey((function(n){e.textContent=n})),editorModeObject.start()}}function resolveLanguageId(e){return e=parseInt(e),languageIdTable[e]||e}function resolveApiUrl(e){return e=parseInt(e),languageApiUrlTable[e]||defaultUrl}function editorsUpdateFontSize(e){sourceEditor.updateOptions({fontSize:e}),stdinEditor.updateOptions({fontSize:e}),stdoutEditor.updateOptions({fontSize:e})}function updateScreenElements(){var e=window.innerWidth<=1200?"none":"";$(".wide.screen.only").each((function(n){$(this).css("display",e)}))}$(window).resize((function(){layout.updateSize(),updateScreenElements(),showMessages()})),$(document).ready((function(){updateScreenElements(),console.log("Hey, Judge0 IDE is open-sourced: https://github.com/judge0/ide. Have fun!"),($selectLanguage=$("#select-language")).change((function(e){isEditorDirty?changeEditorLanguage():insertTemplate()})),$compilerOptions=$("#compiler-options"),($commandLineArguments=$("#command-line-arguments")).attr("size",$commandLineArguments.attr("placeholder").length),($insertTemplateBtn=$("#insert-template-btn")).click((function(e){isEditorDirty&&confirm("Are you sure? Your current changes will be lost.")&&insertTemplate()})),($runBtn=$("#run-btn")).click((function(e){run()})),$navigationMessage=$("#navigation-message span"),$updates=$("#judge0-more"),$(`input[name="editor-mode"][value="${editorMode}"]`).prop("checked",!0),$('input[name="editor-mode"]').on("change",(function(e){localStorageSetItem("editorMode",editorMode=e.target.value),resizeEditor(sourceEditor.getLayoutInfo()),changeEditorMode(),sourceEditor.focus()})),$statusLine=$("#status-line"),$(document).on("keydown","body",(function(e){var n=e.keyCode||e.which;if(120==n)e.preventDefault(),run();else if(119==n){e.preventDefault();var t=prompt("Enter URL of Judge0 API:",apiUrl);null!=t&&(t=t.trim()),null!=t&&""!=t&&localStorageSetItem("api-url",apiUrl=t)}else 118==n?(e.preventDefault(),localStorageSetItem("wait",wait=!wait),alert(`Submission wait is ${wait?"ON. Enjoy":"OFF"}.`)):event.ctrlKey&&107==n?(e.preventDefault(),editorsUpdateFontSize(fontSize+=1)):event.ctrlKey&&109==n&&(e.preventDefault(),editorsUpdateFontSize(fontSize-=1))})),$("select.dropdown").dropdown(),$(".ui.dropdown").dropdown(),$(".ui.dropdown.site-links").dropdown({action:"hide",on:"hover"}),$(".ui.checkbox").checkbox(),$(".message .close").on("click",(function(){$(this).closest(".message").transition("fade")})),loadMessages(),require(["vs/editor/editor.main","monaco-vim","monaco-emacs"],(function(e,n,t){layout=new GoldenLayout(layoutConfig,$("#site-content")),MonacoVim=n,MonacoEmacs=t,layout.registerComponent("source",(function(e,n){sourceEditor=monaco.editor.create(e.getElement()[0],{automaticLayout:!0,theme:"vs-dark",scrollBeyondLastLine:!0,readOnly:n.readOnly,language:"cpp",minimap:{enabled:!1}}),changeEditorMode(),sourceEditor.getModel().onDidChangeContent((function(e){currentLanguageId=parseInt($selectLanguage.val()),isEditorDirty=sourceEditor.getValue()!=sources[currentLanguageId]})),sourceEditor.onDidLayoutChange(resizeEditor)})),layout.registerComponent("stdin",(function(e,n){stdinEditor=monaco.editor.create(e.getElement()[0],{automaticLayout:!0,theme:"vs-dark",scrollBeyondLastLine:!1,readOnly:n.readOnly,language:"plaintext",minimap:{enabled:!1}})})),layout.registerComponent("stdout",(function(e,n){stdoutEditor=monaco.editor.create(e.getElement()[0],{automaticLayout:!0,theme:"vs-dark",scrollBeyondLastLine:!1,readOnly:n.readOnly,language:"plaintext",minimap:{enabled:!1}}),e.on("tab",(function(e){e.element.append('<span id="stdout-dot" class="dot" hidden></span>'),e.element.on("mousedown",(function(e){e.target.closest(".lm_tab").children[3].hidden=!0}))}))})),layout.on("initialised",(function(){$(".monaco-editor")[0].appendChild($("#editor-status-line")[0]),getIdFromURI()?loadSavedSource():loadRandomLanguage(),$("#site-navigation").css("border-bottom","1px solid black"),sourceEditor.focus(),editorsUpdateFontSize(fontSize)})),layout.init()}))}));var assemblySource="section\t.text\n    global _start\n\n_start:\n\n    xor\teax, eax\n    lea\tedx, [rax+len]\n    mov\tal, 1\n    mov\tesi, msg\n    mov\tedi, eax\n    syscall\n\n    xor\tedi, edi\n    lea\teax, [rdi+60]\n    syscall\n\nsection\t.rodata\n\nmsg\tdb 'hello, world', 0xa\nlen\tequ\t$ - msg\n",bashSource='echo "hello, world"',basicSource='PRINT "hello, world"',cSource='// Powered by Judge0\n#include <stdio.h>\n\nint main(void) {\n    printf("Hello Judge0!\\n");\n    return 0;\n}\n',csharpSource='public class Hello {\n    public static void Main() {\n        System.Console.WriteLine("hello, world");\n    }\n}\n',cppSource='#include <iostream>\n\nint main() {\n    std::cout << "hello, world" << std::endl;\n    return 0;\n}\n',competitiveProgrammingSource="#include <algorithm>\n#include <cstdint>\n#include <iostream>\n#include <limits>\n#include <set>\n#include <utility>\n#include <vector>\n\nusing Vertex    = std::uint16_t;\nusing Cost      = std::uint16_t;\nusing Edge      = std::pair< Vertex, Cost >;\nusing Graph     = std::vector< std::vector< Edge > >;\nusing CostTable = std::vector< std::uint64_t >;\n\nconstexpr auto kInfiniteCost{ std::numeric_limits< CostTable::value_type >::max() };\n\nauto dijkstra( Vertex const start, Vertex const end, Graph const & graph, CostTable & costTable )\n{\n    std::fill( costTable.begin(), costTable.end(), kInfiniteCost );\n    costTable[ start ] = 0;\n\n    std::set< std::pair< CostTable::value_type, Vertex > > minHeap;\n    minHeap.emplace( 0, start );\n\n    while ( !minHeap.empty() )\n    {\n        auto const vertexCost{ minHeap.begin()->first  };\n        auto const vertex    { minHeap.begin()->second };\n\n        minHeap.erase( minHeap.begin() );\n\n        if ( vertex == end )\n        {\n            break;\n        }\n\n        for ( auto const & neighbourEdge : graph[ vertex ] )\n        {\n            auto const & neighbour{ neighbourEdge.first };\n            auto const & cost{ neighbourEdge.second };\n\n            if ( costTable[ neighbour ] > vertexCost + cost )\n            {\n                minHeap.erase( { costTable[ neighbour ], neighbour } );\n                costTable[ neighbour ] = vertexCost + cost;\n                minHeap.emplace( costTable[ neighbour ], neighbour );\n            }\n        }\n    }\n\n    return costTable[ end ];\n}\n\nint main()\n{\n    constexpr std::uint16_t maxVertices{ 10000 };\n\n    Graph     graph    ( maxVertices );\n    CostTable costTable( maxVertices );\n\n    std::uint16_t testCases;\n    std::cin >> testCases;\n\n    while ( testCases-- > 0 )\n    {\n        for ( auto i{ 0 }; i < maxVertices; ++i )\n        {\n            graph[ i ].clear();\n        }\n\n        std::uint16_t numberOfVertices;\n        std::uint16_t numberOfEdges;\n\n        std::cin >> numberOfVertices >> numberOfEdges;\n\n        for ( auto i{ 0 }; i < numberOfEdges; ++i )\n        {\n            Vertex from;\n            Vertex to;\n            Cost   cost;\n\n            std::cin >> from >> to >> cost;\n            graph[ from ].emplace_back( to, cost );\n        }\n\n        Vertex start;\n        Vertex end;\n\n        std::cin >> start >> end;\n\n        auto const result{ dijkstra( start, end, graph, costTable ) };\n\n        if ( result == kInfiniteCost )\n        {\n            std::cout << \"NO\\n\";\n        }\n        else\n        {\n            std::cout << result << '\\n';\n        }\n    }\n\n    return 0;\n}\n",clojureSource='(println "hello, world")\n',cobolSource='IDENTIFICATION DIVISION.\nPROGRAM-ID. MAIN.\nPROCEDURE DIVISION.\nDISPLAY "hello, world".\nSTOP RUN.\n',lispSource='(write-line "hello, world")',dSource='import std.stdio;\n\nvoid main()\n{\n    writeln("hello, world");\n}\n',elixirSource='IO.puts "hello, world"',erlangSource='main(_) ->\n    io:fwrite("hello, world\\n").\n',executableSource='Judge0 IDE assumes that content of executable is Base64 encoded.\n\nThis means that you should Base64 encode content of your binary,\npaste it here and click "Run".\n\nHere is an example of compiled "hello, world" NASM program.\nContent of compiled binary is Base64 encoded and used as source code.\n\nhttps://ide.judge0.com/?kS_f\n',fsharpSource='printfn "hello, world"\n',fortranSource='program main\n    print *, "hello, world"\nend\n',goSource='package main\n\nimport "fmt"\n\nfunc main() {\n    fmt.Println("hello, world")\n}\n',groovySource='println "hello, world"\n',haskellSource='main = putStrLn "hello, world"',javaSource='public class Main {\n    public static void main(String[] args) {\n        System.out.println("hello, world");\n    }\n}\n',javaScriptSource='console.log("hello, world");',kotlinSource='fun main() {\n    println("hello, world")\n}\n',luaSource='print("hello, world")',objectiveCSource='#import <Foundation/Foundation.h>\n\nint main() {\n    @autoreleasepool {\n        char name[10];\n        scanf("%s", name);\n        NSString *message = [NSString stringWithFormat:@"hello, %s\\n", name];\n        printf("%s", message.UTF8String);\n    }\n    return 0;\n}\n',ocamlSource='print_endline "hello, world"',octaveSource='printf("hello, world\\n");',pascalSource="program Hello;\nbegin\n    writeln ('hello, world')\nend.\n",perlSource='my $name = <STDIN>;\nprint "hello, $name";\n',phpSource='<?php\nprint("hello, world\\n");\n?>\n',plainTextSource="hello, world\n",prologSource=":- initialization(main).\nmain :- write('hello, world\\n').\n",pythonSource='print("hello, world")',rSource='cat("hello, world\\n")',rubySource='puts "hello, world"',rustSource='fn main() {\n    println!("hello, world");\n}\n',scalaSource='object Main {\n    def main(args: Array[String]) = {\n        val name = scala.io.StdIn.readLine()\n        println("hello, "+ name)\n    }\n}\n',sqliteSource="-- On Judge0 IDE your SQL script is run on chinook database (https://www.sqlitetutorial.net/sqlite-sample-database).\n-- For more information about how to use SQL with Judge0 API please\n-- watch this asciicast: https://asciinema.org/a/326975.\nSELECT\n    Name, COUNT(*) AS num_albums\nFROM artists JOIN albums\nON albums.ArtistID = artists.ArtistID\nGROUP BY Name\nORDER BY num_albums DESC\nLIMIT 4;\n",sqliteAdditionalFiles="",swiftSource='import Foundation\nlet name = readLine()\nprint("hello, \\(name!)")\n',typescriptSource='console.log("hello, world");',vbSource='Public Module Program\n   Public Sub Main()\n      Console.WriteLine("hello, world")\n   End Sub\nEnd Module\n',c3Source='// On the Judge0 IDE, C3 is automatically\n// updated every hour to the latest commit on master branch.\nmodule main;\n\nextern func void printf(char *str, ...);\n\nfunc int main()\n{\n    printf("hello, world\\n");\n    return 0;\n}\n',javaTestSource="import static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass MainTest {\n    static class Calculator {\n        public int add(int x, int y) {\n            return x + y;\n        }\n    }\n\n    private final Calculator calculator = new Calculator();\n\n    @Test\n    void addition() {\n        assertEquals(2, calculator.add(1, 1));\n    }\n}\n",mpiccSource='// Try adding "-n 5" (without quotes) into command line arguments. \n#include <mpi.h>\n\n#include <stdio.h>\n\nint main()\n{\n    MPI_Init(NULL, NULL);\n\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    printf("Hello from processor with rank %d out of %d processors.\\n", world_rank, world_size);\n\n    MPI_Finalize();\n\n    return 0;\n}\n',mpicxxSource='// Try adding "-n 5" (without quotes) into command line arguments. \n#include <mpi.h>\n\n#include <iostream>\n\nint main()\n{\n    MPI_Init(NULL, NULL);\n\n    int world_size;\n    MPI_Comm_size(MPI_COMM_WORLD, &world_size);\n\n    int world_rank;\n    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);\n\n    std::cout << "Hello from processor with rank "\n              << world_rank << " out of " << world_size << " processors.\\n";\n\n    MPI_Finalize();\n\n    return 0;\n}\n',mpipySource='# Try adding "-n 5" (without quotes) into command line arguments. \nfrom mpi4py import MPI\n\ncomm = MPI.COMM_WORLD\nworld_size = comm.Get_size()\nworld_rank = comm.Get_rank()\n\nprint(f"Hello from processor with rank {world_rank} out of {world_size} processors")\n',nimSource='# On the Judge0 IDE, Nim is automatically\n# updated every day to the latest stable version.\necho "hello, world"\n',pythonForMlSource='import mlxtend\nimport numpy\nimport pandas\nimport scipy\nimport sklearn\n\nprint("hello, world")\n',bosqueSource='// On the Judge0 IDE, Bosque (https://github.com/microsoft/BosqueLanguage)\n// is automatically updated every hour to the latest commit on master branch.\n\nnamespace NSMain;\n\nconcept WithName {\n    invariant $name != "";\n\n    field name: String;\n}\n\nconcept Greeting {\n    abstract method sayHello(): String;\n    \n    virtual method sayGoodbye(): String {\n        return "goodbye";\n    }\n}\n\nentity GenericGreeting provides Greeting {\n    const instance: GenericGreeting = GenericGreeting@{};\n\n    override method sayHello(): String {\n        return "hello world";\n    }\n}\n\nentity NamedGreeting provides WithName, Greeting {\n    override method sayHello(): String {\n        return String::concat("hello", " ", this.name);\n    }\n}\n\nentrypoint function main(arg?: String): String {\n    var val = arg ?| "";\n    if (val == "1") {\n        return GenericGreeting@{}.sayHello();\n    }\n    elif (val == "2") {\n        return GenericGreeting::instance.sayHello();\n    }\n    else {\n        return NamedGreeting@{name="bob"}.sayHello();\n    }\n}\n',cppTestSource="#include <gtest/gtest.h>\n\nint add(int x, int y) {\n    return x + y;\n}\n\nTEST(AdditionTest, NeutralElement) {\n    EXPECT_EQ(1, add(1, 0));\n    EXPECT_EQ(1, add(0, 1));\n    EXPECT_EQ(0, add(0, 0));\n}\n\nTEST(AdditionTest, CommutativeProperty) {\n    EXPECT_EQ(add(2, 3), add(3, 2));\n}\n\nint main(int argc, char **argv) {\n    ::testing::InitGoogleTest(&argc, argv);\n    return RUN_ALL_TESTS();\n}\n",csharpTestSource="using NUnit.Framework;\n\npublic class Calculator\n{\n    public int add(int a, int b)\n    {\n        return a + b;\n    }\n}\n\n[TestFixture]\npublic class Tests\n{\n    private Calculator calculator;\n\n    [SetUp]\n    protected void SetUp()\n    {\n        calculator = new Calculator();\n    }\n\n    [Test]\n    public void NeutralElement()\n    {\n        Assert.AreEqual(1, calculator.add(1, 0));\n        Assert.AreEqual(1, calculator.add(0, 1));\n        Assert.AreEqual(0, calculator.add(0, 0));\n    }\n\n    [Test]\n    public void CommutativeProperty()\n    {\n        Assert.AreEqual(calculator.add(2, 3), calculator.add(3, 2));\n    }\n}\n",sources={45:assemblySource,46:bashSource,47:basicSource,48:cSource,49:cSource,50:cSource,51:csharpSource,52:cppSource,53:cppSource,54:competitiveProgrammingSource,55:lispSource,56:dSource,57:elixirSource,58:erlangSource,44:executableSource,59:fortranSource,60:goSource,61:haskellSource,62:javaSource,63:javaScriptSource,64:luaSource,65:ocamlSource,66:octaveSource,67:pascalSource,68:phpSource,43:plainTextSource,69:prologSource,70:pythonSource,71:pythonSource,72:rubySource,73:rustSource,74:typescriptSource,75:cSource,76:cppSource,77:cobolSource,78:kotlinSource,79:objectiveCSource,80:rSource,81:scalaSource,82:sqliteSource,83:swiftSource,84:vbSource,85:perlSource,86:clojureSource,87:fsharpSource,88:groovySource,1001:cSource,1002:cppSource,1003:c3Source,1004:javaSource,1005:javaTestSource,1006:mpiccSource,1007:mpicxxSource,1008:mpipySource,1009:nimSource,1010:pythonForMlSource,1011:bosqueSource,1012:cppTestSource,1013:cSource,1014:cppSource,1015:cppTestSource,1021:csharpSource,1022:csharpSource,1023:csharpTestSource,1024:fsharpSource},fileNames={45:"main.asm",46:"script.sh",47:"main.bas",48:"main.c",49:"main.c",50:"main.c",51:"Main.cs",52:"main.cpp",53:"main.cpp",54:"main.cpp",55:"script.lisp",56:"main.d",57:"script.exs",58:"main.erl",44:"a.out",59:"main.f90",60:"main.go",61:"main.hs",62:"Main.java",63:"script.js",64:"script.lua",65:"main.ml",66:"script.m",67:"main.pas",68:"script.php",43:"text.txt",69:"main.pro",70:"script.py",71:"script.py",72:"script.rb",73:"main.rs",74:"script.ts",75:"main.c",76:"main.cpp",77:"main.cob",78:"Main.kt",79:"main.m",80:"script.r",81:"Main.scala",82:"script.sql",83:"Main.swift",84:"Main.vb",85:"script.pl",86:"main.clj",87:"script.fsx",88:"script.groovy",1001:"main.c",1002:"main.cpp",1003:"main.c3",1004:"Main.java",1005:"MainTest.java",1006:"main.c",1007:"main.cpp",1008:"script.py",1009:"main.nim",1010:"script.py",1011:"main.bsq",1012:"main.cpp",1013:"main.c",1014:"main.cpp",1015:"main.cpp",1021:"Main.cs",1022:"Main.cs",1023:"Test.cs",1024:"script.fsx"},languageIdTable={1001:1,1002:2,1003:3,1004:4,1005:5,1006:6,1007:7,1008:8,1009:9,1010:10,1011:11,1012:12,1013:13,1014:14,1015:15,1021:21,1022:22,1023:23,1024:24},extraApiUrl="https://extra-ce.judge0.com",languageApiUrlTable={1001:extraApiUrl,1002:extraApiUrl,1003:extraApiUrl,1004:extraApiUrl,1005:extraApiUrl,1006:extraApiUrl,1007:extraApiUrl,1008:extraApiUrl,1009:extraApiUrl,1010:extraApiUrl,1011:extraApiUrl,1012:extraApiUrl,1013:extraApiUrl,1014:extraApiUrl,1015:extraApiUrl,1021:extraApiUrl,1022:extraApiUrl,1023:extraApiUrl,1024:extraApiUrl},competitiveProgrammingInput="3\n3 2\n1 2 5\n2 3 7\n1 3\n3 3\n1 2 4\n1 3 7\n2 3 1\n1 3\n3 1\n1 2 4\n1 3\n",inputs={54:competitiveProgrammingInput},competitiveProgrammingCompilerOptions="-O3 --std=c++17 -Wall -Wextra -Wold-style-cast -Wuseless-cast -Wnull-dereference -Werror -Wfatal-errors -pedantic -pedantic-errors",compilerOptions={54:competitiveProgrammingCompilerOptions};
