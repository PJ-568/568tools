async function pyodideInit(){window.pyodide=await loadPyodide(),await pyodide.loadPackage("micropip");let e=await fetch("./tokenizer.json").then((e=>e.text()));pyodide.FS.writeFile("/tokenizer.json",e,{encoding:"utf8"}),console.log(await pyodide.runPythonAsync('\n  import sys\n  print(sys.version)\n  import os\n  os.environ["TOKENIZERS_PARALLELISM"] = "0" # This is needed because threading doesn\'t work in Pyodide yet: https://github.com/pyodide/pyodide/issues/2816#issue-1290719241\n  import micropip\n  await micropip.install(\'./tokenizers_python-0.11.0-cp310-cp310-emscripten_3_1_14_wasm32.whl\')\n  from tokenizers import Tokenizer\n  tokenizer = Tokenizer.from_file("/tokenizer.json")\n  '))}function textToTokens(e){return pyodide.globals.set("input_text",e),pyodide.runPython("\n  encoded = tokenizer.encode(input_text)\n  ids = encoded.ids\n  tokens = encoded.tokens\n  "),pyodide.globals.get("ids").toJs()}function tokensToText(e){return pyodide.globals.set("input_tokens",e.join(",")),pyodide.runPython("\n  input_tokens = [int(x) for x in input_tokens.split(',')]\n  decoded = tokenizer.decode(input_tokens)\n  "),pyodide.globals.get("decoded")}function padLeftWithZeros(e,t){for(e=e.slice(0);e.length<t;)e.unshift(0);return e}async function createOrtSession(e,t,n,o,i){ort.env.wasm.proxy=!0,self.crossOriginIsolated&&(ort.env.wasm.numThreads=navigator.hardwareConcurrency/2),ort.logLevel="verbose",ort.logLevelInternal="verbose";let r={executionProviders:[n],graphOptimizationLevel:"all"};t&&(r={executionProviders:[n],enableMemPattern:!1,enableCpuMemArena:!1,extra:{session:{disable_prepacking:"1",use_device_allocator_for_initializers:"0",use_ort_model_bytes_directly:"1",use_ort_model_bytes_for_initializers:"1"}}});let a=URL.createObjectURL(e);const s=await ort.InferenceSession.create(a,r);return URL.revokeObjectURL(a),{predictText:async function(e,t=32,n=null,r=void 0,a="multinomial",l=1,d=.8,p=0,c=!1){let u=Date.now();const _=new Float32Array(o*i),f=new Float32Array(o*i),y=new Float32Array(o*i),m=new Float32Array(o*i),g=new Float32Array(o*i);m.fill(-1e30);let h={idx:null,xx_att:new ort.Tensor("float32",_,[o,i]),aa_att:new ort.Tensor("float32",f,[o,i]),bb_att:new ort.Tensor("float32",y,[o,i]),pp_att:new ort.Tensor("float32",m,[o,i]),xx_ffn:new ort.Tensor("float32",g,[o,i])},k=textToTokens(e);const w=k.length,x=[k.shift()];n&&n({token:x[0],status:"Reading prompt",i:1,outOf:w});const b="multinomial"===a;b?console.log("doing multinomial sampling with temp",l,"and topP",d,"and repetitivePenality",p):console.log("doing greedy sampling with repetitivePenality",p);for(var T=0;T<t&&(!r||!r.cancelled);T++){let e=Int32Array.from(padLeftWithZeros(x,1024)),o=new ort.Tensor("int32",e,[1024]);h.idx=o;let i,a=await s.run(h);if(r&&r.cancelled)break;if(0==k.length){let e;if(b){const t=Object.values(a.x.data);if(n&&c){const n=getMultinomialProbs(applyRepetitionPenalty(t,x,p),l,d);i=choiceIndex(n),e=[];for(let t=0;t<n.length;t++)t!=i&&n[t]>0&&e.push(t)}else i=npsample(t,l,d,x,p)}else i=greedySampling(a.x.data,x,p);n&&n({token:i,other_tokens:e,status:"Output",i:T+1-w,outOf:t-w})}else i=k.shift(),n&&n({token:i,status:"Reading prompt",i:T+1,outOf:w});x.push(i),h.xx_att=a.xx_att_r,h.aa_att=a.aa_att_r,h.bb_att=a.bb_att_r,h.pp_att=a.pp_att_r,h.xx_ffn=a.xx_ffn_r}let v=Date.now()-u;return console.log(`Finished. Took ${v}ms`),n&&n({status:"Finished",tokensPerSec:(T+1)/(v/1e3)}),tokensToText(x)}}}
